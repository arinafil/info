# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16iDg1ixzmROCEpgKb_yDlXaLgM5AZ4eO

Сортировка вставками
"""

import numpy as np
import time
import matplotlib.pyplot as plt
import random
def insertion_sort(alist):
  t=time.time()
  for i in range(1,len(alist)):
    temp=alist[i]
    j=i-1
    while (j>=0 and temp< alist[j]):
      alist[j+1]=alist[j]
      j=j-1
    alist[j+1]=temp
  t2=time.time()
  return t2-t
x=range(1,10000,100)
N=[]
T=[]
for i in x:
  N.append(random.randint(1,10000))
  T.append(insertion_sort(N))

plt.scatter(N,T)
plt.ylabel('Время')
plt.grid(True)

"""Сортировка пирамидальная"""

def heapsort(alist):
  build_max_heap(alist)
  for i in range(len(alist)-1,0,-1):
    alist[0], alist[i]=alist[i], alist[0]
    max_heapify(alist, index=0, size=i)
def parent(i):
  return(i-1)//2
def left(i):
  return 2*i+1
def right(i):
  return 2*i+2
def build_max_heap(alist):
  length = len(alist)
  start = parent(length - 1)
  while start >= 0:
      max_heapify(alist, index=start, size=length)
      start = start - 1

def max_heapify(alist, index, size):
  t=time.time()
  l = left(index)
  r = right(index)
  if (l < size and alist[l] > alist[index]):
      largest = l
  else:
      largest = index
  if (r < size and alist[r] > alist[largest]):
      largest = r
  if (largest != index):
      alist[largest], alist[index] = alist[index], alist[largest]
      max_heapify(alist, largest, size)
  t2=time.time()
  return(t2-t)
x=range(1,10000,100)
N=[]
T=[]
for i in x:
  N.append(random.randint(1,10000))
  T.append(insertion_sort(N))

plt.scatter(N,T)
plt.ylabel('Время')
plt.grid(True)